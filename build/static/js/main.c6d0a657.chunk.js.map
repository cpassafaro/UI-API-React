{"version":3,"sources":["Button.js","TabInfo.js","Tabs.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","this","props","className","button","Component","TabInfo","src","image","title","subtitle","author","published","info","Tabs","createTabs","e","element1","target","array","push","console","log","textContent","i","state","elements","volumeInfo","map","item","imageLinks","smallThumbnail","publishedDate","authors","description","length","setState","tabs","makeCreatedButtonArray","sibling","parentElement","firstChild","siblings","nodeType","nextSibling","makeActive","siblingsList2","classList","remove","add","searchTerm","siblingsList","url","fetch","then","res","json","data","items","catch","err","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c6d0a657.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Tabs.css'\n\nclass Button extends Component {\n    render(){\n        return(\n            <button onClick = {this.props.onClick} className=\"tablinks\" >{this.props.button}</button>\n        )\n    }\n}\nexport default Button;","import React, {Component} from 'react';\nimport './Tabs.css';\n\n\nclass TabInfo extends Component {\n    render(){\n        return (<div className=\"tabcontent\">\n        <img src = {this.props.image} className = 'image'/>\n        <div className = \"book-info-container\">\n          <h2>{this.props.title} : {this.props.subtitle}</h2>\n          {/* <h2>{this.props.subtitle}</h2> */}\n          <h3>Author: {this.props.author}</h3>\n          <p>Published: {this.props.published}</p>\n          <p>Description: {this.props.info}</p>\n        </div>\n      </div>)\n    }\n}\n\nexport default TabInfo;","import React, {Component} from 'react';\nimport Button from './Button';\nimport TabInfo from './TabInfo';\nimport './Tabs.css'\n\n\n\nclass Tabs extends Component{\n    constructor(){\n        super()\n\n        this.state = {\n        searchTerm: ['Biography'],\n        elements: [],\n        tabs: '',\n        siblingsList: [],\n        }\n\n    }\n    componentDidMount (){\n        console.log('mounted')\n        let url = `https://www.googleapis.com/books/v1/volumes?q=subject:${this.state.searchTerm[0]}`\n        fetch(url)\n        .then(res => {\n            // console.log(res)\n            return res.json()\n        })\n        .then(data => {\n            console.log(data.items)\n            this.setState({elements:data.items})\n        })\n        .catch(err =>{\n            console.log('Something went wrong', err)\n        })\n    }\n\n    createTabs = e => {\n        let element1 = e.target;\n        let array = [];\n        array.push(element1)\n        console.log(element1.textContent)\n        for(let i = 0; i < this.state.elements.length; i++){\n            if(element1.textContent == this.state.elements[i].volumeInfo.title){\n                console.log('found')\n                console.log(this.state.elements[i].volumeInfo)\n                array = array.map(item => {\n                    // item.className.\n                    return(\n                    <TabInfo image = {this.state.elements[i].volumeInfo.imageLinks.smallThumbnail} \n                    title = {this.state.elements[i].volumeInfo.title}\n                    subtitle = {this.state.elements[i].volumeInfo.subtitle} \n                    published = {this.state.elements[i].volumeInfo.publishedDate} \n                    author = {this.state.elements[i].volumeInfo.authors[0]} \n                    info = {this.state.elements[i].volumeInfo.description}/>)\n                })\n            }\n        }   \n        this.setState({tabs: array})\n    }\n\n    //this creates an arrray of the buttons\n    makeCreatedButtonArray = e => {\n        console.log(e)\n        let sibling = e.target.parentElement.firstChild\n        let siblings = [];\n        while (sibling) {\n            if (sibling.nodeType === 1 && sibling !== e) {\n                siblings.push(sibling);\n            }\n            sibling = sibling.nextSibling\n        }\n    \n        // return this.setState({siblingsList: siblings});\n        return this.makeActive(e, siblings)\n    \n    };\n\n    //this can't see the event if I do it asynchronously!!\n    makeActive = (e, siblingsList2) => {\n        console.log(e)\n        console.log(siblingsList2)\n        let target = e.target;\n        console.log(target)\n        for(let i = 0; i< siblingsList2.length; i++){\n            if(siblingsList2[i] != target){\n                siblingsList2[i].classList.remove('active')\n            }else if(siblingsList2[i] == target){\n                siblingsList2[i].classList.add('active')\n            }else{\n                console.log(siblingsList2[i])\n            }\n        }\n    }\n\n\n    render (){\n        console.log(this.state.siblingsList)\n        return(<div className = \"body\">\n            <header className = 'header'>Choose a Biography</header>\n                <div className = 'experiment'>\n                    <div className=\"tab\">\n                        {this.state.elements != '' \n                        ? <Button onClick = {(e)=> {\n                            this.createTabs(e)\n                            this.makeCreatedButtonArray(e)\n                        }} \n                        button = {this.state.elements[0].volumeInfo.title} />\n                        : <Button button = 'Loading'/>}\n                         {this.state.elements != '' \n                        ? <Button onClick = {(e) => {\n                            this.createTabs(e)\n                            this.makeCreatedButtonArray(e)\n                        }} button = {this.state.elements[2].volumeInfo.title}/>\n                        : <Button button = 'Loading'/>}\n                         {this.state.elements != '' \n                        ? <Button onClick = {(e) => {\n                            this.createTabs(e)\n                            this.makeCreatedButtonArray(e)\n                        }} button = {this.state.elements[3].volumeInfo.title}/>\n                        : <Button button = 'Loading'/>}\n                    </div>\n                </div>\n                <div className =\"experiment-bottom\">\n                    <div className =\"bottom\">{this.state.tabs}</div>\n                </div>\n        </div>\n\n        )\n    }\n}\n\nexport default Tabs;\n\n\n\n\n","import React, {Component} from 'react';\nimport Tabs from './Tabs'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n\n    }\n  }\n\n  \n  render(){\n  return (<Tabs/>\n  \n    \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}